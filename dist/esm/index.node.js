import { webcrypto } from 'crypto';
import { encode, decode } from '@juanelas/base64';

class Ciphertext {
    constructor(encrypted, iv) {
        this.encrypted = encrypted;
        this.iv = iv;
    }
    toJSON() {
        const ciphertext = {
            encrypted: encode(this.encrypted, true, false),
            iv: encode(this.iv, true, false)
        };
        return ciphertext;
    }
    static fromJSON(json) {
        const cJson = (typeof json === 'string') ? JSON.parse(json) : json;
        return new Ciphertext(decode(cJson.encrypted), decode(cJson.iv));
    }
}

async function generateKey(bitLength = 256, extractable = false) {
    const aesGcmParams = {
        name: 'AES-GCM',
        length: bitLength
    };
    return await webcrypto.subtle.generateKey(aesGcmParams, extractable, ['encrypt', 'decrypt']);
}
async function deriveKey(password, bitLength = 256, extractable = false, pbkdf2Params = {
    hash: 'SHA-256',
    iterations: 100000,
    salt: webcrypto.getRandomValues(new Uint8Array(16))
}) {
    if (pbkdf2Params.hash === undefined) {
        pbkdf2Params.hash = 'SHA-256';
    }
    if (pbkdf2Params.iterations === undefined) {
        pbkdf2Params.iterations = 100000;
    }
    if (pbkdf2Params.salt === undefined) {
        pbkdf2Params.salt = webcrypto.getRandomValues(new Uint8Array(16));
    }
    const params = {
        name: 'PBKDF2',
        ...pbkdf2Params
    };
    const masterKey = await webcrypto.subtle.importKey('raw', (new TextEncoder()).encode(password), 'PBKDF2', false, ['deriveKey']);
    const key = await webcrypto.subtle.deriveKey(params, masterKey, { name: 'AES-GCM', length: bitLength }, extractable, ['encrypt', 'decrypt']);
    return {
        key,
        salt: params.salt
    };
}
async function exportJwk(key) {
    if (!key.extractable) {
        throw new Error('Provided key is not extractable. Consider passing the extractable argument to generateKey or importKey method if you need to extract the key');
    }
    return await webcrypto.subtle.exportKey('jwk', key);
}
async function importKey(key, extractable = false) {
    if (key.byteLength !== undefined) {
        return await webcrypto.subtle.importKey('raw', key, {
            name: 'AES-GCM'
        }, extractable, ['encrypt', 'decrypt']);
    }
    return await webcrypto.subtle.importKey('jwk', key, {
        name: 'AES-GCM'
    }, extractable, ['encrypt', 'decrypt']);
}
async function encrypt(plaintext, key, iv = webcrypto.getRandomValues(new Uint8Array(16))) {
    const aesGcmParams = {
        name: 'AES-GCM',
        iv
    };
    const encrypted = await webcrypto.subtle.encrypt(aesGcmParams, key, plaintext);
    return new Ciphertext(encrypted, iv);
}
async function decrypt(ciphertext, key) {
    const c = (ciphertext instanceof Ciphertext) ? ciphertext : Ciphertext.fromJSON(ciphertext);
    const aesGcmParams = { name: 'AES-GCM', iv: c.iv };
    return await webcrypto.subtle.decrypt(aesGcmParams, key, c.encrypted);
}

export { Ciphertext, decrypt, deriveKey, encrypt, exportJwk, generateKey, importKey };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
